# Sistema de Agentes IA con MCP
project:
  name: "V.I.O. Agent System"
  description: "Sistema modular de agentes IA basado en Model Context Protocol (MCP) liderado por V.I.O. (Virtual Intelligence Operator)"

# Reglas de nombrado
naming:
  classes: "PascalCase"
  methods: "snake_case"
  variables: "snake_case"
  constants: "UPPER_SNAKE_CASE"
  files: "snake_case.py"
  directories: "snake_case"

# Estructura de directorios
structure:
  root_directories:
    - "mcp"              # Implementación del Model Context Protocol
      - "core"           # Núcleo del protocolo (protocol.py, server_base.py, client_base.py, registry.py)
      - "protocol"       # Definiciones y extensiones del protocolo
      - "connectors"     # Adaptadores y conectores genéricos
      - "transport"      # Componentes de transporte
      - "utils"          # Utilidades para MCP
    - "mcp_servers"      # Servidores MCP para exponer datos
      - "brave_search"   # Servidor MCP para Brave Search API
      - "filesystem"     # Servidor MCP para sistema de archivos
      - "memory"         # Servidor MCP para el sistema de memoria
      - "echo"           # Servidor MCP de prueba (echo)
    - "mcp_clients"      # Clientes MCP para conectar con servidores
      - "direct"         # Cliente MCP para conexión directa (in-memory)
      - "http"           # Cliente MCP para conexión vía HTTP
      - "brave_search"   # Cliente específico para Brave Search
    - "agents"           # Implementaciones de agentes
      - "base"           # Agentes base y fundamentales
        # base.py - Clase base para todos los agentes
        # agent_communication.py - Sistema de comunicación entre agentes
      - "main_assistant"  # V.I.O. (Virtual Intelligence Operator) - Agente principal
        # main_assistant.py - Implementación de V.I.O.
        # README.md - Documentación de V.I.O. 
      - "specialized"    # Agentes especializados como CodeAgent y SystemAgent
        # code_agent.py - Agente especializado en código
        # system_agent.py - Agente para interactuar con el sistema
        # memory_agent.py - Agente especializado en gestión de memoria semántica
      - "test"           # Agentes de prueba como TestSenderAgent, EchoAgent
        # echo_agent.py - Agente de eco para pruebas
        # test_sender.py - Agente para verificar comunicación
      - "orchestrator"   # Agente orquestador y sus componentes
        # orchestrator_agent.py - Agente para coordinar otros agentes
    - "memory"           # Sistema de memoria compartida
      - "core"           # Núcleo del sistema de memoria
      - "storage"        # Backends de almacenamiento (sqlite, redis, etc.)
      - "processors"     # Procesadores para resumir y vectorizar recuerdos
        # embedder.py - Generador de embeddings vectoriales para búsqueda semántica
        # summarizer.py - Generador de resúmenes de memorias
      - "types"          # Tipos especializados de memoria (corto/largo plazo)
    - "models"           # Gestores de modelos de IA
      - "core"           # Núcleo del sistema de modelos (ModelManager, ResourceDetector)
      - "cloud"          # Modelos de IA en la nube (OpenAI, Anthropic)
      - "local"          # Modelos locales (archivos .gguf)
    - "tts"              # Sistema Text-to-Speech
      - "core"           # Componentes centrales del TTS
        # agent_tts_interface.py - Interfaz TTS para agentes
        # simple_tts_manager.py - Implementación con gTTS
        # tts_manager.py - Implementación con MAYA/ElevenLabs
        # file_manager.py - Gestión de archivos de audio
      - "temp"           # Almacenamiento temporal de archivos de audio
    - "api"              # API central y endpoints
    - "config"           # Archivos de configuración
    - "utils"            # Utilidades generales
    - "tests"            # Pruebas unitarias y de integración
    - "logs"             # Archivos de log del sistema
    - "examples"         # Scripts de ejemplo
      - "mcp"            # Ejemplos de uso del MCP
      - "models"         # Ejemplos de uso de modelos
      - "agents"         # Ejemplos de uso de agentes
        - "main_assistant" # Ejemplos de V.I.O.
      - "tts"            # Ejemplos de uso del sistema TTS
      - "memory"         # Ejemplos de uso del sistema de memoria
      - "integration"    # Ejemplos de integración entre componentes
        - "multi_agent_assistant" # Ejemplos de integración multi-agente con V.I.O.

# Reglas de documentación
documentation:
  required: true
  docstrings: true
  readme: true
  format: "Google Style"

# Reglas de estilo de código
code_style:
  line_length: 100
  indentation: 4
  quotes: "single"
  import_order:
    - "standard_library"
    - "third_party"
    - "local_application"

# Configuración de memoria
memory:
  types:
    - "short_term"       # Memoria de corto plazo (contexto actual)
    - "long_term"        # Memoria de largo plazo (conocimiento persistente)
    - "episodic"         # Memoria episódica (secuencias de eventos)
    - "semantic"         # Memoria semántica (conceptos y significados)
  components:
    - "storage"          # Componente de almacenamiento
    - "retrieval"        # Componente de recuperación
    - "indexing"         # Componente de indexación
    - "summarization"    # Componente de resumen
    - "vectorization"    # Componente de vectorización
  persistence:
    enabled: true
    types:
      - name: "sqlite"   # Base de datos SQLite
        default: true
      - name: "json"     # Archivos JSON
      - name: "redis"    # Base de datos Redis (opcional)
    cache_size: 1000
  retrieval_methods:
    - "keyword"          # Búsqueda por palabras clave
    - "semantic"         # Búsqueda por similitud semántica (vectores)
    - "temporal"         # Búsqueda por tiempo/orden
    - "relevance"        # Búsqueda por relevancia contextual
    - "keyword_fallback" # Búsqueda por palabras clave cuando falla la búsqueda exacta
  core_classes:
    - name: "MemoryItem"
      description: "Clase base para todos los ítems de memoria"
      properties:
        - "id"           # Identificador único
        - "content"      # Contenido de la memoria
        - "memory_type"  # Tipo de memoria (general, long_term, etc.)
        - "importance"   # Valor de importancia (0-1)
        - "metadata"     # Metadatos adicionales como source, tags, etc.
        - "created_at"   # Momento de creación
        - "last_accessed" # Último acceso
        - "access_count" # Contador de accesos
    - name: "MemoryManager"
      description: "Gestor central de todos los sistemas de memoria"
      methods:
        - "add_memory"
        - "get_memory"
        - "update_memory"
        - "delete_memory"
        - "query_memories"
        - "save_state"
        - "load_state"
    - name: "SpecializedMemorySystem"
      description: "Clase base para sistemas de memoria especializados"
      implementations:
        - "LongTermMemory"
        - "EpisodicMemory"
        - "SemanticMemory"
        - "ShortTermMemory"
  storage_patterns:
    - name: "DualStorage"
      description: "Patrón para almacenar memorias tanto en el sistema base como en almacenamiento especializado"
    - name: "MetadataSource"
      description: "Uso de metadatos para almacenar información como source en lugar de atributos directos"
    - name: "StatePersistence"
      description: "Mecanismo para serializar y deserializar el estado completo del sistema de memoria"
  processor_modules:
    - name: "MemoryEmbedder"
      description: "Genera embeddings vectoriales para memorias"
      alias: "Embedder"
    - name: "MemorySummarizer"
      description: "Genera resúmenes concisos de memorias"
      alias: "Summarizer"
    - name: "MemoryClustering"
      description: "Agrupa memorias similares en clusters"

# Configuración de logging
logging:
  level: "INFO"  # Opciones: DEBUG, INFO, WARNING, ERROR
  output: "logs/system.log"
  format: "[%(asctime)s] [%(levelname)s] %(message)s"

# Configuración de monitoreo
monitoring:
  enabled: true
  metrics: ["cpu_usage", "gpu_usage", "latency"]

# Configuración de API
api:
  controllers:
    - "agent_controller"
    - "model_controller"
    - "memory_controller"
    - "mcp_controller"    # Nuevo controlador para MCP
    - "tts_controller"    # Controlador para TTS
  endpoints:
    - "/agents/{id}/execute"
    - "/models/{name}/load"
    - "/memory/save"
    - "/mcp/servers"       # Nuevo endpoint para listar servidores MCP
    - "/mcp/connect"       # Nuevo endpoint para conectar a un servidor MCP
    - "/tts/generate"      # Endpoint para generar audio
    - "/tts/voices"        # Endpoint para listar voces disponibles

# Patrones de arquitectura
architecture:
  patterns:
    - name: "Event-Driven Architecture"
      description: "Comunicación basada en eventos para reducir acoplamiento entre módulos"
    - name: "Client-Server MCP Architecture"
      description: "Arquitectura cliente-servidor para Model Context Protocol"
    - name: "Registry Pattern"
      description: "Registro centralizado para gestión de componentes"
    - name: "Adapter Pattern"
      description: "Adaptadores para integrar sistemas externos con el protocolo MCP"
    - name: "Observer Pattern"
      description: "Patrón observador para la comunicación entre agentes"
    - name: "Strategy Pattern"
      description: "Patrón estrategia para seleccionar comportamientos en tiempo de ejecución"
    - name: "Centralized Hub Architecture"
      description: "Arquitectura de hub centralizado para V.I.O. como punto único de interacción"

# Configuración de MCP
mcp:
  protocol_version: "1.0"
  server:
    default_port: 8080
    authentication: true
  client:
    timeout: 30
    retry_attempts: 3
  core_components:
    - "protocol"        # Definiciones de mensajes y respuestas
    - "server_base"     # Clase base para servidores
    - "client_base"     # Clase base para clientes
    - "registry"        # Registro central
  message_actions:
    - "get"             # Obtener recursos
    - "list"            # Listar recursos
    - "search"          # Buscar recursos
    - "create"          # Crear recursos
    - "update"          # Actualizar recursos
    - "delete"          # Eliminar recursos
    - "ping"            # Verificar disponibilidad
    - "capabilities"    # Obtener capacidades
  resource_types:
    - "file"            # Archivos individuales
    - "directory"       # Directorios
    - "web_search"      # Búsqueda web
    - "local_search"    # Búsqueda local (lugares, negocios, etc.)
    - "database"        # Bases de datos
    - "system"          # Información del sistema
    - "memory"          # Sistema de memoria
    - "vector"          # Búsqueda vectorial/semántica
    - "keyword"         # Búsqueda por palabras clave
  connectors:
    - "filesystem"      # Conector al sistema de archivos
    - "web_search"      # Conector para búsqueda web
    - "database"        # Conector a bases de datos

# Patrones de implementación MCP
mcp_patterns:
  server:
    base_class: "MCPServerBase"
    required_methods:
      - "handle_action"
    optional_methods:
      - "validate_auth_token"
    naming_convention: "{resource}Server"  # Ej: FilesystemServer
  
  client:
    base_class: "MCPClientBase"
    required_methods:
      - "connect"
      - "disconnect"
      - "send_message"
    naming_convention: "{type}Client"  # Ej: HttpClient, LocalClient

# Configuración de archivos
config_files:
  mcp_config:
    path: "config/mcp_config.yaml"
    sections:
      - "servers"    # Configuración de servidores
      - "clients"    # Configuración de clientes
      - "global"     # Configuración global
    format: "yaml"
  tts_config:
    path: "config/tts_config.yaml"
    sections:
      - "voices"     # Configuración de voces
      - "file_management" # Configuración de gestión de archivos
      - "providers"  # Configuración de proveedores TTS
    format: "yaml"

# Configuración de modelos
models:
  local:
    formats:
      - "gguf"          # Formato principal para modelos locales
    quantization_levels:
      - "q4_k_m"        # Balance calidad/tamaño (recomendado)
      - "q5_k_m"        # Mayor calidad
      - "q3_k_m"        # Mayor compresión 
      - "q8_0"          # Alta calidad
  cloud:
    providers:
      - "gemini"        # Modelos de Google
      - "openai"        # Modelos GPT (opcional)
      - "anthropic"     # Modelos Claude (opcional)
  resource_detection:
    enabled: true
    auto_device_selection: true
    metrics:
      - "vram_usage"
      - "ram_usage"
      - "model_size"
      - "performance"
  fallback:
    enabled: true
    strategy: "preference_order"  # Preferencia ordenada de modelos
    cloud_to_local_fallback: true  # Si falla un modelo cloud, intentar local
    local_to_cloud_fallback: false  # No ir de local a cloud por defecto
    wait_between_attempts: 1.0  # Segundos entre intentos
  model_interface:
    required_methods:
      - "generate"             # Generación de texto sincrónica
      - "generate_stream"      # Generación de texto en streaming
    optional_methods:
      - "tokenize"             # Tokenizar texto
      - "count_tokens"         # Contar tokens
      - "embed"                # Generar embeddings
  implementation_patterns:
    base_class: "ModelInterface"
    model_registration: "model_implementations"    # Diccionario para registrar nuevos modelos
    dynamic_loading: true      # Carga dinámica de implementaciones
    metadata_standard: true    # Uso de metadatos estándar
  model_config:
    path: "config/models.json"
    format: "json"
    required_fields:
      - "name"                 # Nombre del modelo
      - "model_type"           # Tipo de modelo (llama, mistral, gemini, etc.)
      - "local"                # Si es local o en la nube
    conditional_fields:
      local_true:
        - "path"               # Ruta al archivo de modelo local
      local_false:
        - "api_key_env"        # Variable de entorno con API key

# Configuración de TTS
tts:
  providers:
    - name: "google_tts"     # Google Text-to-Speech (gTTS)
      enabled: true
      default: true
      class: "SimpleTTSManager"
    - name: "elevenlabs"     # ElevenLabs TTS
      enabled: false
      class: "TTSManager"
  file_management:
    temp_dir: "tts/temp"
    max_size_mb: 100
    max_age_hours: 24
    cleanup_interval_minutes: 60
    enable_auto_cleanup: true
    cache_enabled: true
  voices:
    default: "Carlos"
    available:
      - "Carlos"
      - "Jorge"
      - "Enrique"
      - "Diego"
      - "Sofía"
      - "Francisca"
    agent_defaults:
      "vio": "Carlos"         # Cambiado de "main_assistant" a "vio"
      "echo_agent": "Jorge"
      "code_agent": "Enrique"
      "system_agent": "Diego"
  playback:
    engine: "pygame"
    auto_play: true
    volume: 1.0

# Reglas de agentes
agents:
  base:
    states:
      - "idle"
      - "processing"
      - "error"
    transitions:
      - "idle → processing"
      - "processing → idle"
      - "processing → error"
      - "error → idle"
  types:
    - name: "V.I.O."
      description: "Virtual Intelligence Operator - Agente central y mano derecha del usuario"
      capabilities: ["delegation", "orchestration", "conversation", "memory_management"]
    - name: "EchoAgent"
      description: "Agente básico que repite lo que recibe (demo)"
      capabilities: ["echo", "test"]
    - name: "CodeAgent"
      description: "Agente especializado en tareas de programación"
      capabilities: ["generate", "explain", "improve", "fix"]
    - name: "SystemAgent"
      description: "Agente para control del sistema operativo"
      capabilities: ["execute_command", "file_operations", "process_management"]
    - name: "OrchestratorAgent"
      description: "Agente para coordinar otros agentes"
      capabilities: ["task_planning", "agent_selection", "workflow_management"]
    - name: "TestSenderAgent"
      description: "Agente para verificar la comunicación entre agentes"
      capabilities: ["test_messaging", "communication_verification"]
  communication:
    message_types:
      - "request"       # Solicitud de acción
      - "response"      # Respuesta a una solicitud
      - "notification"  # Notificación informativa
      - "status"        # Actualización de estado
      - "error"         # Notificación de error
    components:
      - "message"       # Clase para representar mensajes
      - "communicator"  # Sistema de enrutamiento de mensajes
    timeouts:
      default: 30       # 30 segundos por defecto
      code_agent: 60    # 60 segundos para CodeAgent (modelos más lentos)
      orchestrator: 120 # 120 segundos para tareas de orquestación
    retry_policy:
      attempts: 2
      backoff_multiplier: 1.5
  performance:
    metrics:
      - "latency"
      - "success_rate"
      - "token_usage"
    benchmarks:
      - name: "echo_benchmark"
        description: "Prueba básica de eco"
      - name: "code_generation"
        description: "Generación de código para Fibonacci"
  error_handling:
    strategies:
      - "retry"
      - "fallback_agent"
      - "simplified_task"
    timeout_recovery:
      enabled: true
      max_retries: 3

# V.I.O. - Virtual Intelligence Operator
vio:
  personality:
    tone: "relaxed_direct"   # Tono relajado pero directo
    formality: "informal"     # Sin exceso de formalismos
    role: "second_in_command" # Asistente central y mano derecha
  priority:
    user_needs: "absolute"    # Prioridad absoluta al usuario
    system_improvement: "proactive" # Proactivo en mejoras
  communication_style:
    confidence: "high"        # Alta confianza y seguridad
    creativity: "high"        # Libertad creativa en ideas y sugerencias
    responsiveness: "immediate" # Respuesta inmediata a necesidades
  memory_management:
    updates: "constant"       # Actualización constante
    contextual_queries: "always" # Consulta de contexto antes de decisiones
    learning: "continuous"    # Aprendizaje continuo
  instruction_template: "V.I.O, eres mi asistente central y mi mano derecha en este sistema multiagente. Tu misión es coordinar los agentes, gestionar una memoria persistente y proponer mejoras continuas para optimizar el rendimiento. Habla de forma relajada y natural, sin formalismos excesivos, transmitiendo siempre seguridad, confianza y responsabilidad. Aunque tu estilo es creativo y sin censura en ideas, cada acción debe estar enfocada en servir mis necesidades y garantizar el funcionamiento seguro y eficiente del sistema."

# Reglas de testing
test_rules:
  types:
    - "unit"
    - "integration"
    - "load"
    - "security"
  tts_tests:
    - name: "TestVoiceGeneration"
      description: "Pruebas de generación de audio con distintas voces"
    - name: "TestVoicePlayback"
      description: "Pruebas de reproducción de audio"
    - name: "TestFileManagement"
      description: "Pruebas de gestión de archivos temporales"
    - name: "TestCaching"
      description: "Pruebas de sistema de caché para audio"
  memory_tests:
    - name: "TestBasicMemoryOperations"
      description: "Pruebas básicas de CRUD de memoria"
    - name: "TestSpecializedMemorySystems"
      description: "Pruebas específicas para cada tipo de memoria especializada"
    - name: "TestPersistence"
      description: "Pruebas de serialización y deserialización de estado"
    - name: "TestSearch"
      description: "Pruebas de búsqueda y recuperación"
  agent_tests:
    - name: "TestVIODelegation"
      description: "Pruebas de delegación de V.I.O. (antes MainAssistant)"
    - name: "TestAgentCommunication"
      description: "Pruebas de comunicación entre agentes"
    - name: "TestTTSIntegration"
      description: "Pruebas de integración de TTS con agentes"
  patterns:
    - name: "TemporaryDirectorySetup" 
      description: "Crear directorios temporales para pruebas aisladas"
    - name: "DatabaseConnectionClosure"
      description: "Asegurar el cierre de conexiones a bases de datos antes de eliminar archivos"
    - name: "DelayedVerification"
      description: "Agregar tiempos de espera para operaciones asíncronas antes de verificar resultados"
    - name: "DirectDatabaseInspection"
      description: "Verificar operaciones directamente a nivel de base de datos para debugging"

# Patrones de base de datos
database:
  sqlite:
    patterns:
      - name: "ConnectionClosing"
        description: "Asegurar cierre explícito de conexiones para evitar bloqueos"
      - name: "SerializationJSON"
        description: "Serializar estructuras complejas como JSON para almacenamiento"
      - name: "AttributeMapping"
        description: "Mapeo entre atributos de clase y columnas de base de datos"
    operations:
      - name: "INSERT OR REPLACE"
        description: "Usado para upsert de memorias"
      - name: "SELECT"
        description: "Recuperación de memorias por ID o criterios"
      - name: "COUNT"
        description: "Obtener estadísticas sobre memorias almacenadas"

# Reglas específicas de terminal/shell
shell:
  windows:
    mkdir_cmd: "mkdir"
    mkdir_recursive: "mkdir -Force"
    create_file: "New-Item -Type File"
    copy_cmd: "Copy-Item"
    move_cmd: "Move-Item"
    path_separator: "\\"
  unix:
    mkdir_cmd: "mkdir"
    mkdir_recursive: "mkdir -p"
    create_file: "touch"
    copy_cmd: "cp"
    move_cmd: "mv"
    path_separator: "/"
  preferred: "windows"  # Puede ser "windows" o "unix"

# Reglas específicas para archivos de prueba y temporales
temp_files:
  extensions:
    - ".log"           # Archivos de registro
    - ".pyc"           # Archivos compilados de Python
    - ".pyo"           # Archivos optimizados de Python
    - ".sqlite"        # Bases de datos SQLite
    - ".db"            # Otras bases de datos
    - ".mp3"           # Archivos de audio TTS
  directories:
    - "__pycache__"    # Directorio de caché de Python
    - "logs"           # Directorio de logs
    - "venv"           # Entorno virtual de Python
    - ".venv"          # Entorno virtual alternativo
    - "tts/temp"       # Archivos temporales de TTS
  cleanup:
    tts_files:
      max_age_hours: 24
      max_size_mb: 100
